#include "mixd.hpp"
#include <cstdint>
#include <filesystem>

void printUsage(char *binaryName)
{
    std::cout << "MIXD tool to separate a chromatography mesh+data into the interstitial and particle domains" << std::endl;
    std::cout << "Run in directory with spacetime data.all. Expects to find ../mesh/{minf,nmap}" << std::endl;
    std::cout << "Automatically uses the top timeslab data. New data is semidiscrete." << std::endl;
    std::cout << "No input flags expected." << std::endl;
}


/*
 * @author : Jayghosh S. Rao
 * @date   : 15 Jul. 2021
 * @program: mixdsplit
 * @brief  : Program that takes a full space-time classic XNS mesh + data.all, and
 *              1. maps it onto the interstitial mesh generated by rmmat
 *              2. TODO: use mmat to extract the individual meshes and data
 *
 */


int main(int argc, char **argv)
{
    using namespace std;
    using namespace mixd;

    printUsage(argv[0]);

    bool spacetime = true;
    bool spacetimeupper = true;

    try{

        long ne, nn, nnspace;
        readminf("../mesh/minf", &nn, &ne);

        if(spacetime)
        {
            if(nn % 2 != 0)
                throw MixdException("space-time mesh must have even number of nodes!");

            nnspace = nn/2;
        }
        else
            nnspace = nn;

        // Read only half the file, because it just repeats
        MixdFile<int> nmap("../mesh/nmap", nn/2);
        nmap.read();

        int new_nn = nmap.max();

        int ndf = 2;
        // NOTE: Only extracting the first dof
        int idf = 0;

        mixd::MixdFile<double> data("data.all", nn, ndf, false);
        std::remove("newdata.all");
        mixd::MixdFile<double> newdata("newdata.all", new_nn, 1, false);

        // TODO: calculate nts from filesize and nn
        int stu_offset = 0;

        std::uintmax_t filesize = std::filesystem::file_size("data.all");
        int nts = filesize / 8 / nn / ndf;

        std::cout << "Found " << nts << " timesteps!" << std::endl;

        if (spacetime && spacetimeupper)
            stu_offset = nnspace;

        std::cout << "nn: " << nn << std::endl;
        std::cout << "nnspace: " << nnspace << std::endl;
        std::cout << "spacetime upper offset = " << stu_offset << std::endl;

        for(int its=0; its<nts; its++)
        {
            data.read(its);
            for (long i=0; i<nnspace; i++)
            {
                if (nmap(i) > 0)
                {
                    newdata(nmap(i)-1, 0) = data(i + stu_offset, idf);
                }
            }
            newdata.append();
        }

    } catch(mixd::MixdException e)
    { std::cout << e.msg() << std::endl; }

    return 0;
}
